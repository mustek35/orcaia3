# test_standalone_complete.py
"""
Test completamente independiente que no depende de los m√≥dulos con errores
"""
import time
import numpy as np
import cv2
import torch
import sys
import os
from pathlib import Path

def check_ffmpeg():
    """Verificar si FFmpeg est√° disponible"""
    print("üîç Verificando FFmpeg...")
    
    import subprocess
    try:
        result = subprocess.run(['ffmpeg', '-version'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            version = result.stdout.split('\n')[0]
            print(f"‚úÖ {version}")
            return True
        else:
            print("‚ùå FFmpeg no funciona")
            return False
    except FileNotFoundError:
        print("‚ùå FFmpeg no est√° instalado")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def test_opencv_backends():
    """Test todos los backends de OpenCV disponibles"""
    print("üß™ Testing backends OpenCV...")
    
    # Lista de backends a probar
    backends_to_test = [
        ('CAP_FFMPEG', getattr(cv2, 'CAP_FFMPEG', None)),
        ('CAP_GSTREAMER', getattr(cv2, 'CAP_GSTREAMER', None)),
        ('CAP_DSHOW', getattr(cv2, 'CAP_DSHOW', None)),
        ('CAP_MSMF', getattr(cv2, 'CAP_MSMF', None)),
    ]
    
    available_backends = [(name, backend) for name, backend in backends_to_test if backend is not None]
    print(f"üìã Backends disponibles: {[name for name, _ in available_backends]}")
    
    return available_backends

def test_rtsp_connection():
    """Test directo de conexi√≥n RTSP"""
    print("üß™ Test conexi√≥n RTSP...")
    
    rtsp_url = "rtsp://root:%40Remoto753524@19.10.10.132:554/media/video1"
    rtsp_tcp = rtsp_url + "?tcp"
    
    backends = test_opencv_backends()
    
    for backend_name, backend_id in backends:
        print(f"\nüîß Probando {backend_name}...")
        
        cap = cv2.VideoCapture()
        
        # Configuraciones importantes
        cap.set(cv2.CAP_PROP_OPEN_TIMEOUT_MSEC, 10000)
        cap.set(cv2.CAP_PROP_READ_TIMEOUT_MSEC, 5000)
        cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        
        # Probar URL normal
        print(f"   üì° Intentando: {rtsp_url}")
        success = cap.open(rtsp_url, backend_id)
        
        if not success:
            print(f"   üì° Intentando TCP: {rtsp_tcp}")
            success = cap.open(rtsp_tcp, backend_id)
        
        if success:
            print(f"   ‚úÖ {backend_name}: Conexi√≥n exitosa")
            
            # Intentar leer frames
            frames_ok = 0
            for i in range(5):
                ret, frame = cap.read()
                if ret and frame is not None:
                    frames_ok += 1
                    if i == 0:
                        print(f"   üìê Frame: {frame.shape}")
                else:
                    break
            
            print(f"   üìä Frames: {frames_ok}/5")
            cap.release()
            
            if frames_ok > 0:
                return backend_name, frames_ok
        else:
            print(f"   ‚ùå {backend_name}: Fallo")
        
        cap.release()
    
    return None, 0

def test_cuda_basic():
    """Test b√°sico de CUDA"""
    print("üß™ Test CUDA b√°sico...")
    
    if torch.cuda.is_available():
        gpu_name = torch.cuda.get_device_name(0)
        memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
        print(f"‚úÖ GPU: {gpu_name}")
        print(f"üìä Memoria: {memory:.1f} GB")
        
        # Test tensor b√°sico
        try:
            x = torch.randn(100, 100).cuda()
            y = torch.matmul(x, x)
            print(f"‚úÖ Operaci√≥n CUDA exitosa: {y.shape}")
            return True
        except Exception as e:
            print(f"‚ùå Error operaci√≥n CUDA: {e}")
            return False
    else:
        print("‚ùå CUDA no disponible")
        return False

def test_yolo_basic():
    """Test b√°sico de YOLO sin usar el procesador problem√°tico"""
    print("üß™ Test YOLO b√°sico...")
    
    try:
        from ultralytics import YOLO
        
        # Verificar si existe el modelo
        model_paths = ['yolov8n.pt', 'models/yolov8n.pt', '../models/yolov8n.pt']
        model_path = None
        
        for path in model_paths:
            if os.path.exists(path):
                model_path = path
                break
        
        if not model_path:
            print("‚ö†Ô∏è Modelo yolov8n.pt no encontrado, descargando...")
            model_path = 'yolov8n.pt'
        
        print(f"üì¶ Cargando modelo: {model_path}")
        model = YOLO(model_path)
        
        # Test con imagen sint√©tica
        test_image = np.random.randint(0, 255, (640, 640, 3), dtype=np.uint8)
        
        print("üîç Ejecutando detecci√≥n...")
        results = model(test_image, verbose=False)
        
        if results and len(results) > 0:
            boxes = results[0].boxes
            detections = len(boxes) if boxes is not None else 0
            print(f"‚úÖ YOLO funcionando: {detections} detecciones")
            return True
        else:
            print("‚ö†Ô∏è YOLO ejecut√≥ pero sin resultados")
            return True
    
    except Exception as e:
        print(f"‚ùå Error YOLO: {e}")
        return False

def test_connectivity():
    """Test conectividad b√°sica"""
    print("üß™ Test conectividad...")
    
    import socket
    
    ip = "19.10.10.132"
    port = 554
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex((ip, port))
        sock.close()
        
        if result == 0:
            print(f"‚úÖ {ip}:{port} accesible")
            return True
        else:
            print(f"‚ùå {ip}:{port} no accesible")
            return False
    except Exception as e:
        print(f"‚ùå Error conectividad: {e}")
        return False

def patch_cuda_processor():
    """Intentar patchear el archivo cuda_pipeline_processor.py"""
    print("üîß Intentando patchear cuda_pipeline_processor.py...")
    
    processor_file = "core/cuda_pipeline_processor.py"
    
    if not os.path.exists(processor_file):
        print(f"‚ùå Archivo {processor_file} no encontrado")
        return False
    
    try:
        # Leer el archivo
        with open(processor_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Buscar la l√≠nea problem√°tica
        problematic_line = "if self.model_config['compile_model'] and hasattr(torch, 'compile'):"
        
        if problematic_line in content:
            # Reemplazar con versi√≥n segura
            safe_line = "if self.model_config.get('compile_model', False) and hasattr(torch, 'compile'):"
            content = content.replace(problematic_line, safe_line)
            
            # Crear backup
            backup_file = processor_file + ".backup"
            if not os.path.exists(backup_file):
                with open(backup_file, 'w', encoding='utf-8') as f:
                    f.write(content.replace(safe_line, problematic_line))  # backup original
            
            # Escribir archivo patcheado
            with open(processor_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ Archivo patcheado: {processor_file}")
            print(f"üíæ Backup creado: {backup_file}")
            return True
        else:
            print("‚ö†Ô∏è L√≠nea problem√°tica no encontrada (posiblemente ya patcheado)")
            return True
    
    except Exception as e:
        print(f"‚ùå Error patcheando: {e}")
        return False

def test_patched_cuda_processor():
    """Test del procesador CUDA despu√©s del patch"""
    print("üß™ Test CUDA Processor patcheado...")
    
    try:
        from core.cuda_pipeline_processor import cuda_pipeline_manager
        
        # Configuraci√≥n completa
        config = {
            'model_path': 'yolov8n.pt',
            'batch_size': 1,
            'confidence_threshold': 0.5,
            'half_precision': True,
            'compile_model': False,
            'optimize_for_inference': True,
            'warmup_iterations': 1,
            'max_det': 100,
            'iou_threshold': 0.45,
            'device': 'cuda:0',
            'verbose': False
        }
        
        processor = cuda_pipeline_manager.create_processor('test_patched', config)
        processor.load_model()
        processor.start_processing()
        
        # Test r√°pido
        test_frame = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        
        results_count = 0
        
        def on_results(detections, metadata):
            nonlocal results_count
            results_count += 1
            print(f"üéØ Resultado: {len(detections)} detecciones")
        
        processor.results_ready.connect(on_results)
        
        # Enviar algunos frames
        for i in range(3):
            processor.add_frame(test_frame, {'frame_id': i})
            time.sleep(0.1)
        
        time.sleep(1)  # Esperar procesamiento
        
        processor.stop_processing()
        cuda_pipeline_manager.stop_all_processors()
        
        print(f"‚úÖ Procesador funcionando: {results_count} resultados")
        return results_count > 0
        
    except Exception as e:
        print(f"‚ùå Error procesador: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print("üöÄ TEST STANDALONE COMPLETO")
    print("=" * 60)
    
    results = {}
    
    # 1. Verificar FFmpeg
    print("\n1Ô∏è‚É£ FFmpeg:")
    results['ffmpeg'] = check_ffmpeg()
    
    # 2. Test conectividad
    print("\n2Ô∏è‚É£ Conectividad:")
    results['connectivity'] = test_connectivity()
    
    # 3. Test RTSP
    print("\n3Ô∏è‚É£ RTSP:")
    backend, frames = test_rtsp_connection()
    results['rtsp'] = frames > 0
    results['rtsp_backend'] = backend
    
    # 4. Test CUDA b√°sico
    print("\n4Ô∏è‚É£ CUDA:")
    results['cuda'] = test_cuda_basic()
    
    # 5. Test YOLO b√°sico
    print("\n5Ô∏è‚É£ YOLO:")
    results['yolo'] = test_yolo_basic()
    
    # 6. Patchear procesador
    print("\n6Ô∏è‚É£ Patch CUDA Processor:")
    results['patch'] = patch_cuda_processor()
    
    # 7. Test procesador patcheado
    if results['patch']:
        print("\n7Ô∏è‚É£ Test Procesador Patcheado:")
        results['processor'] = test_patched_cuda_processor()
    else:
        results['processor'] = False
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìã RESUMEN COMPLETO:")
    print(f"   üé¨ FFmpeg:           {'‚úÖ' if results['ffmpeg'] else '‚ùå'}")
    print(f"   üåê Conectividad:     {'‚úÖ' if results['connectivity'] else '‚ùå'}")
    print(f"   üì° RTSP:             {'‚úÖ' if results['rtsp'] else '‚ùå'}")
    if results['rtsp_backend']:
        print(f"   üì∫ Backend exitoso:  {results['rtsp_backend']}")
    print(f"   üéØ CUDA:             {'‚úÖ' if results['cuda'] else '‚ùå'}")
    print(f"   ü§ñ YOLO:             {'‚úÖ' if results['yolo'] else '‚ùå'}")
    print(f"   üîß Patch:            {'‚úÖ' if results['patch'] else '‚ùå'}")
    print(f"   ‚öôÔ∏è  Procesador:       {'‚úÖ' if results['processor'] else '‚ùå'}")
    
    # An√°lisis
    critical_working = results['cuda'] and results['yolo']
    rtsp_working = results['ffmpeg'] and results['connectivity'] and results['rtsp']
    
    print("\nüéØ AN√ÅLISIS:")
    if critical_working and rtsp_working and results['processor']:
        print("   üéâ ¬°TODO FUNCIONANDO! Sistema listo para desarrollo")
    elif critical_working and results['processor']:
        print("   ‚ö†Ô∏è CUDA/YOLO OK, pero problemas con RTSP")
        print("   üí° Puedes desarrollar con datos sint√©ticos")
    elif rtsp_working:
        print("   ‚ö†Ô∏è RTSP OK, pero problemas con IA")
        print("   üí° Revisa instalaci√≥n de PyTorch/CUDA")
    else:
        print("   ‚ùå Problemas cr√≠ticos detectados")
    
    print("\nüí° PR√ìXIMOS PASOS:")
    if not results['ffmpeg']:
        print("   ‚Ä¢ Instala FFmpeg: https://ffmpeg.org/download.html")
    if not results['connectivity']:
        print("   ‚Ä¢ Verifica conexi√≥n de red a la c√°mara")
    if not results['cuda']:
        print("   ‚Ä¢ Reinstala PyTorch con CUDA")
    if results['patch'] and not results['processor']:
        print("   ‚Ä¢ Reinicia Python y vuelve a probar")
    
    if critical_working and rtsp_working and results['processor']:
        print("   üöÄ ¬°Puedes continuar con el desarrollo del proyecto!")

if __name__ == "__main__":
    main()